datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  Zone      Zone[]
}

model Zone {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @unique
  name           String       @unique
  settings       ZoneSettings @relation(fields: [zoneSettingsId], references: [zoneId])
  controllers    Controller[]
  zoneSettingsId Int          @unique
}

model ZoneSettings {
  id          Int     @id @default(autoincrement())
  zoneId      Int     @unique
  isActive    Boolean @default(true)
  description String
  longitude   Float
  latitude    Float
  Zone        Zone[]
}

model Controller {
  id          Int            @id @default(autoincrement())
  zone        Zone           @relation(fields: [zoneId], references: [id])
  zoneId      Int            @unique
  name        String         @unique
  description String
  type        ControllerType @default(ESP32)
  sensors     Sensor[]
  switches    Switch[]
  pins        Pin[]
}

model ControllerSettings {
  id           Int            @id @default(autoincrement())
  controllerId Int            @unique
  pins         String
  type         ControllerType
}

model Pin {
  id           Int        @id @default(autoincrement())
  pin          Int        @unique
  pinType      PinType    @default(DIGITAL_INPUT)
  sensorId     Int?       @unique
  sensor       Sensor?    @relation(fields: [sensorId], references: [id])
  switchId     Int?       @unique
  switch       Switch?    @relation(fields: [switchId], references: [id])
  Controller   Controller @relation(fields: [controllerId], references: [id])
  controllerId Int
}

model Sensor {
  id           Int        @id @default(autoincrement())
  controller   Controller @relation(fields: [controllerId], references: [id])
  controllerId Int        @unique
  name         String     @unique
  isActive     Boolean    @default(true)
  readings     Reading[]
  type         SensorType
  pin          Pin?
  pinId        Int?       @unique
}

model Switch {
  id           Int        @id @default(autoincrement())
  controller   Controller @relation(fields: [controllerId], references: [id])
  controllerId Int        @unique
  cron         String
  type         SwitchType
  isActive     Boolean    @default(true)
  name         String     @unique
  pin          Pin?
  pinId        Int?       @unique
}

model Reading {
  id        Int      @id @default(autoincrement())
  sensor    Sensor   @relation(fields: [sensorId], references: [id])
  sensorId  Int      @unique
  value     Float
  createdAt DateTime @default(now())
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  LIGHT
  WATER_LEVEL
  WATER_PH
}

enum SwitchType {
  FAN
  LIGHT
  HEATER
  COOLER
  WATER_PUMP
  HUMIDIFIER
}

enum ControllerType {
  ESP8266
  ESP32
}

enum PinType {
  DIGITAL_OUTPUT
  DIGITAL_INPUT
  ANALOG_OUTPUT
  ANALOG_INPUT
}

enum Role {
  USER
  ADMIN
}
